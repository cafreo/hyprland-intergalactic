
#
# ▄▀▀ ██▀ ▀█▀ ▀█▀ █ █▄ █ ▄▀  ▄▀▀
# ▄██ █▄▄  █   █  █ █ ▀█ ▀▄█ ▄██
#
#

# PREVIEW
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

#set previewer ~/.config/lf/lf_kitty_preview
#set cleaner ~/.config/lf/lf_kitty_clean

# SETTINGS
set hidden false
set ignorecase true
set icons true
set number true
set relativenumber false
set hiddenfiles '.*:lost+found:*.log'
set globsearch false
set globfilter false
set dirfirst true
set history true
set mouse true
set preview true
set sortby 'natural'
set info 'size'
set incsearch true
set incfilter true
set drawbox true
set roundbox true
set ratios '1:2:2'
set period 3
set promptfmt " \033[31;1m%u@%h\033[37;1m:\033[33;1m%w\033[0m"
set cursorpreviewfmt "\033[7m"
set autoquit false
set borderfmt "\033[33;1m"
set ifs "\n"
set timefmt 'Mon 02.01.2006 15:04'
set statfmt "   \033[33m%S\033[0m| \033[36m%p\033[0m| %u:%g| %t| -> %l"
set errorfmt "\033[31m   \033[0m"
set rulerfmt " %a| \033[7;33m 󰪹 %p \033[0m| \033[7;33m%{lf_user_progress}\033[0m| \033[7;34m 󰒉 %s \033[0m| \033[7;32m 󰆏 %c \033[0m| \033[7;31m 󰆐 %m \033[0m| \033[7;35m 󰈲 %f \033[0m| \033[7;36m 󰱼 %{lf_user_selected_size} \033[0m| \033[7;97m   %d \033[0m| %i/%t "
set numberfmt "\033[33m"
set infotimefmtnew "15:04|02.01.06"
set infotimefmtold "02.01.06"
set scrolloff 8
set dircounts false
set copyfmt "\033[7;32m"
set cutfmt "\033[7;31m"
set selectfmt "\033[7;34m"
set truncatechar "~"
set truncatepct "100"
set showbinds true

#
#
# ▄▀▀ ▄▀▄ █▄ ▄█ █▄ ▄█ ▄▀▄ █▄ █ █▀▄ ▄▀▀
# ▀▄▄ ▀▄▀ █ ▀ █ █ ▀ █ █▀█ █ ▀█ █▄▀ ▄██
#
#

# ON CHANGE DIRECTORY
cmd on-cd &{{
    # set title of window
    printf "\033]0; lf - $PWD\007" > /dev/tty

    #kitten @ action set_tab_title "${PWD##*/}"

    # load git infos
    source /usr/share/git/completion/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=auto
    GIT_PS1_SHOWSTASHSTATE=auto
    GIT_PS1_SHOWUNTRACKEDFILES=auto
    GIT_PS1_SHOWUPSTREAM=auto
    GIT_PS1_COMPRESSSPARSESTATE=auto
    git=$(__git_ps1 " %s") || true
    #version=$(echo "lf($(lf -version))")
    
    fmt=" \033[31;1m%u@%h\033[37;1m:\033[33;1m%w\033[0m\033[35;1m$git\033[0m"
    lf -remote "send $id set promptfmt \"$fmt\"" 

    # sorting in specified directories
    case "$PWD" in ~/Pictures/Screenshots | ~/Pictures/Andere\ Bilder/Personen | ~/Downloads | ~/Flow | ~/Documents/Scan | ~/Fonts | /mnt/A-POTRO-NAS/Library/Media/Music )
        lf -remote "send $id set user_prev_sortby $lf_sortby"
        lf -remote "send $id set info time"
        lf -remote "send $id set sortby time"
        lf -remote "send $id set reverse"

        lf -remote "send $id top"
        lf -remote "send $id echo ' 󱕇  changed sort mode to time'"
            ;;
        *)

    # restore sorting on directory exit
        if [[ "$lf_user_prev_sortby" != "" ]]; then
            lf -remote "send $id set sortby $lf_user_prev_sortby"
            lf -remote "send $id set info size"
            lf -remote "send $id set noreverse"

            lf -remote "send $id echo ' 󰦛  restored sort mode to $lf_user_prev_sortby'"
            lf -remote "send $id set user_prev_sortby ''"
            #lf -remote "send $id top"
        fi
        ;;
    esac
}}

# ON REDRAWING THE WINDOW

cmd on-redraw &{{
    if [ $lf_width -le 60 ]; then
        lf -remote "send $id set preview false"
        lf -remote "send $id set ratios 1"

    elif [ $lf_width -le 90 ]; then
        lf -remote "send $id set ratios 1:1"
        lf -remote "send $id set preview true"

    else 
        lf -remote "send $id set ratios 1:2:2"
        lf -remote "send $id set preview true"
    fi 
}}

# ON SELECT

cmd on-select &{{
    s=$(find $fx -type f -maxdepth 1 -ls | awk '{total += $7} END {print total}' | numfmt --to=iec --format='%.1fB')
	lf -remote "send $id set user_selected_size $s"
}}

# ON FOCUS

cmd on-focus-gained :{{
    set cursorparentfmt "\033[7m"
    set cursoractivefmt "\033[7m"
    set cursorpreviewfmt "\033[7m"
}}

cmd on-focus-lost :{{
    set cursorparentfmt "\033[7m"
    set cursoractivefmt "\033[7m"
    set cursorpreviewfmt "\033[7m"
}}

# ON QUIT

cmd on-quit %{{
    ctpv -e $id
    rm ~/.cache/ctpv/*
}}

# SORTING

cmd "󰖽  sort by natural" &{{
    lf -remote "send $id set sortby natural"
    lf -remote "send $id set info size"
    lf -remote "send $id set noreverse"
    lf -remote "send $id top"
}}

cmd "󱎉  sort by size" &{{
    lf -remote "send $id set sortby size"
    lf -remote "send $id set info size"
    lf -remote "send $id set dircounts false"
    lf -remote "send $id top"
}}

cmd "󱕇  sort by time" &{{
    lf -remote "send $id set sortby time"
    lf -remote "send $id set info time"
    lf -remote "send $id set reverse!"
    lf -remote "send $id top"
}}

cmd "󱕇  sort by change time" &{{
    lf -remote "send $id set sortby ctime"
    lf -remote "send $id set info ctime"
    lf -remote "send $id top"
}}

cmd "󱕇  sort by access time" &{{
    lf -remote "send $id set sortby atime"
    lf -remote "send $id set info atime"
    lf -remote "send $id top"
}}

cmd "󰖽  sort by extension" &{{
    lf -remote "send $id set sortby ext"
    lf -remote "send $id set info size"
    lf -remote "send $id top"
}}

cmd "󰒽  reverse sorting order" &{{
    lf -remote "send $id set reverse!"
    lf -remote "send $id top"
}}

# SELECT

cmd "󰒆  select all elements" %{{
    lf -remote "send $id glob-select *"
    lf -remote "send $id on-select"
}}

cmd "󰒆  select all directories" %{{
    if [ "$lf_hidden" = 'false' ]; then
        find "$PWD" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -print0
    else
        find "$PWD" -mindepth 1 -maxdepth 1 -type d -print0
    fi |
    sed 's/ /\\ /g' |
    xargs -0 -I{} lf -remote "send $id toggle {}"
    lf -remote "send $id on-select"
}}

cmd "󰒆  select all files" %{{
    if [ "$lf_hidden" = 'false' ]; then
        find "$PWD" -mindepth 1 -maxdepth 1 -type f -not -name '.*' -print0
    else
        find "$PWD" -mindepth 1 -maxdepth 1 -type f -print0
    fi |
    sed 's/ /\\ /g' |
    xargs -0 -I{} lf -remote "send $id toggle {}"
    lf -remote "send $id on-select"
}}

cmd "󰾂  select all mp4 files" %{{
    lf -remote "send $id glob-select *.mp4"
    lf -remote "send $id on-select"
}}

cmd "󰾂  select all mkv files" %{{
    lf -remote "send $id glob-select *.mkv"
    lf -remote "send $id on-select"
}}

cmd "󰾂  select all png files" %{{
    lf -remote "send $id glob-select *.png"
    lf -remote "send $id on-select"
}}

cmd "󰾂  select all jpg files" %{{
    lf -remote "send $id glob-select *.jpg"
    lf -remote "send $id glob-select *.jpeg"
    lf -remote "send $id on-select"
}}

cmd "󰾂  select all gif files" %{{
    lf -remote "send $id glob-select *.gif"
    lf -remote "send $id on-select"
}}

cmd "󰾂  select all mp3 files" %{{
    lf -remote "send $id glob-select *.mp3"
    lf -remote "send $id on-select"
}}

cmd "󰾂  select all wav files" %{{
    lf -remote "send $id glob-select *.wav"
    lf -remote "send $id on-select"
}}

cmd "󰾂  select all flac files" %{{
    lf -remote "send $id glob-select *.flac"
    lf -remote "send $id on-select"
}}

cmd "󰾂  select all m4a files" %{{
    lf -remote "send $id glob-select *.m4a"
    lf -remote "send $id on-select"
}}

# COPY FILES AND SHOW PROGRESS

cmd "paste-custom" &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift

    if [[ $@ != "" ]]; then
        echo "$(stat $@)"
        lf -remote "send $id set user_progress '  󰪹  '"

        case "$mode" in
            copy)
                cp -a "$@" . &
                wait
                lf -remote "send $id set user_progress '  󰈖  '"
                lf -remote "send $id :clear;reload"
                lf -remote "send $id echo '   file(s) copied successfully'"
                #notify-send "lf file manager - status" "  file(s) copied successfully" -i " "
                sleep 4
                lf -remote "send $id set user_progress ''"

                exit 0
                ;;
            move)
                mv -f "$@" . &
                wait
                lf -remote "send $id set user_progress '  󰈖  '"
                lf -remote "send $id :clear;reload"
                lf -remote "send $id echo '   file(s) moved successfully'"
                #notify-send "lf file manager - status" "  file(s) moved successfully" -i " "
                sleep 4
                lf -remote "send $id set user_progress ''"

                exit 0
                ;;
        esac

    else
        exit 1
    fi 
#lf -remote "send $id paste"
#notify-send "lf file manager - status" "  $pid file(s) copied successfully" -i " "
}}

# COPY FILE NAME

cmd "  copy filename" &{{
    file=${f##*/}
    name=${file%.*}
    if command -v wl-copy 2>&1 >/dev/null; then
        printf $name | wl-copy
        lf -remote "send $id echo ' 󰢨  copied \"$name\" to clipboard'"
    else if command -v xclip 2>&1 >/dev/null; then
        printf $name | xclip
        lf -remote "send $id echo ' 󰢨  copied \"$name\" to clipboard'"
        else
            lf -remote "send $id echoerr 'please install wl-clipboard (wayland) or xclip (x11)'" 
        fi
    fi
}}

cmd "  copy filename with extension" &{{
    file=${f##*/}
    if command -v wl-copy 2>&1 >/dev/null; then
        printf $file | wl-copy
        lf -remote "send $id echo ' 󰢨  copied \"$file\" to clipboard'"
    else if command -v xclip 2>&1 >/dev/null; then
        printf $file | xclip
        lf -remote "send $id echo ' 󰢨  copied \"$name\" to clipboard'"
        else
            lf -remote "send $id echoerr 'please install wl-clipboard (wayland) or xclip (x11)'" 
        fi
    fi
}}

cmd "  show filename with extension" &{{
    file=${f##*/}
    lf -remote "send $id echo '   full file name: \"$file\"'"
}}

cmd "  copy filepath" &{{
    if command -v wl-copy 2>&1 >/dev/null; then
        printf "$fx" | wl-copy
        lf -remote "send $id echo ' 󰢨  copied \"$fx\" to clipboard'"
    else if command -v xclip 2>&1 >/dev/null; then
        printf "$fx" | xclip
        lf -remote "send $id echo ' 󰢨  copied \"$fx\" to clipboard'"
        else
            lf -remote "send $id echoerr 'please install wl-clipboard (wayland) or xclip (x11)'" 
        fi
    fi
}}

cmd "  copy path of current directory" &{{
    if command -v wl-copy 2>&1 >/dev/null; then
        printf $(pwd) | wl-copy
        lf -remote "send $id echo ' 󰢨  copied \"$(pwd)\" to clipboard'"
    else if command -v xclip 2>&1 >/dev/null; then
        printf $(pwd) | xclip
        lf -remote "send $id echo ' 󰢨  copied \"$(pwd)\" to clipboard'"
        else
            lf -remote "send $id echoerr 'please install wl-clipboard (wayland) or xclip (x11)'" 
        fi
    fi
}}

cmd "  copy text in image to clipboard" %{{
    printf "   specify the language code: "
    read -r ans

    output=$(tesseract $f - -l $ans)
    echo $output | wl-copy -o

    lf -remote "send $id echo '   text copied to clipboard '"
}}

# BULK RENAME FILES IN EDITOR

cmd bulk-rename ${{
    if command -v massren 2>&1 >/dev/null; then
        massren -v $(basename -a -- $fx)
        lf -remote "send $id :reload;unselect"
    else
        lf -remote "send $id echoerr 'please install massren'" 
    fi
}}

cmd undo-bulk-rename ${{
    if command -v massren 2>&1 >/dev/null; then
        massren -u
        lf -remote "send $id :reload;unselect"
    else
        lf -remote "send $id echoerr 'please install massren'" 
    fi
}}

# FUZZY FIND

cmd "start fuzzy finder" ${{
#lf -remote "send cd ~/"
    res="$(fd --hidden --ignore-case . | fzf --style full --list-label='   jump to location ' --list-border --list-border=rounded --header-first --color 'list-border:#EFB038,list-label:#CB2211')"
        if [ -f "$res" ]; then
            cmd="select"
        elif [ -d "$res" ]; then
            cmd="cd"
        fi
        
        lf -remote "send $id $cmd \"$res\""
}}

# CREATE DIRECTORIES & FILES

cmd "󰉗  make directory" %{{
    printf " 󰉗  create new directory: "
    read ans
    mkdir $ans
    lf -remote "send $id echo ' 󰉗  created directory \"$ans\"'"
}}

cmd "󰉗  make directory from selected files" %{{
    printf " 󰉗  create new directory: "
    read ans
    mkdir $ans
    mv $fx $ans
    lf -remote "send $id echo ' 󰉗  created directory \"$ans\"'"
}}

cmd "󰝒  make file" %{{
    printf " 󰝒  create new file: "
    read ans
    touch $ans
    lf -remote "send $id echo ' 󰝒  created file \"$ans\"'"
}}

cmd "󰲸  make playlist" %{{
    printf " 󰲸  create new playlist: "
    read ans
    playlist=$ans.m3u

    if [ -f $playlist ]
        then rm $playlist
    fi

#echo "#EXTM3U" >> $playlist
#echo "#PLAYLIST:$ans" >> $playlist

     for file in "$fs"; do
        echo "$file" >> $playlist
     done

     lf -remote 'send :reload;unselect'	
     lf -remote "send $id echo ' 󰲸  created playlist \"$ans\"'"
}}

# CREATE (SOFT/HARD) LINK

cmd "create (soft/hard) link" %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echoerr 'no files selected to create (soft/hard) link'"
        exit 0
    fi

    case "$mode" in
# symbolically copy mode is indicating a soft link
        copy)
            ln -sr -t . -- "$@"
            lf -remote "send $id :unselect;clear"
            lf -remote "send $id echo ' 󰴛  soft link created'"
        ;;
# while a move mode is indicating a hard link
        move)
            ln -t . -- "$@"
            lf -remote "send $id :unselect;clear"
            lf -remote "send $id echo ' 󰴚  hard link created'"
        ;;
    esac
     
    rm ~/.local/share/lf/files 
}}

# CHANGE

cmd "  change owner" %{{
#printf "   change owner: "
#read ans

    for file in "$fx"; do
        chown $USER $file
    done

    lf -remote 'send :reload;unselect'
    lf -remote "send $id echo '   changed owner of \"$file\" to \"$USER\"'"
}}

cmd "󰡉  change group" %{{
    printf " 󰡉  change group: "
    read ans

    for file in "$fx"; do
        chgrp $ans $file
    done

    lf -remote 'send :reload;unselect'
    lf -remote "send $id echo ' 󰡉  changed group of \"$file\" to \"$ans\"'"
}}

cmd "󰦝  change permissions" %{{
    printf " 󰦝  change permissions: "
    read ans

    for file in "$fx"; do
        chmod $ans $file
        perms=$(ls -l $file | awk '{print $1}')
    done

    lf -remote 'send :reload;unselect'
    lf -remote "send $id echo ' 󰦝  set permissions to $perms '"
}}

# CALCULATE DIRECTORY SIZE

cmd "calculate size of directory" &{{
    lf -remote "send $id set info size"
    lf -remote "send $id set dircounts false"
    lf -remote "send calcdirsize"
}}

# ARCHIVES

cmd "󱝣  create zipfile" %{{
    printf " 󱝣  create new zipfile: "
    read ans
    origd="$(pwd)"
    tempd="$(mktemp -d)"
    pushd "$tempd"
    cp -a $fx . 
    7z a -r -tzip "$ans" *
    cp -a "$ans".zip "$origd/"
    popd
    rm -rf "$tempd" 
    lf -remote 'send :reload;unselect'
    lf -remote "send $id echo ' 󱝣  created zipfile \"$ans.zip\"'"
}}

cmd "󱝗  create encrypted zipfile" ${{
    printf " 󱝗  create new encrypted zipfile: "
    read ans
    #printf " 󰯄  set password: "
    #read psw
    origd="$(pwd)"
    tempd="$(mktemp -d)"
    pushd "$tempd"
    cp -a $fx .  
    7z a -mem=AES256 -mx4 -tzip "$ans" -p
    cp -a "$ans".zip "$origd/" 
    popd
    rm -rf "$tempd"
    lf -remote 'send :reload;unselect'
    lf -remote "send $id echo ' 󱝣 created encrypted zipfile \"$ans.zip\"'"
}}

#cmd zip %zip -r "$fx" "$fx"
#cmd zipe %zip -re "$fx.zip" "$fx"

cmd "old extract archive" &{{
    for file in $fx; do
        case $file in
            *.zip) 7z x "$file" -o"${file%.zip}" -y ;;
            *.7z) 7z x "$file" -o"${file%.7z}" -y ;;
            *.rar) 7z x "$file" -o"${file%.rar}" -y ;;
            *.tar.zst) tar --zstd -xf "$file" --one-top-level ;;
            *.tar.gz) tar -xzf "$file" --one-top-level ;;
            *.tar.xz) tar -xf "$file" --one-top-level ;;
            *.tar.bz2) tar -xjf "$file" --one-top-level ;;
            *.gz) gzip -dk "$file" ;;
            *.tar) tar -xf "$file" --one-top-level ;;
            *) lf -remote "send $id echoerr 'unsupported format'" ;;
        esac
    done
    
    lf -remote "send $id :reload;unselect"
    lf -remote "send $id echo '   successfully extracted archive(s)'"
}}

cmd "󱉛  extract archive" &{{
    for file in $fx; do
        ouch d $file
    done

    lf -remote "send $id :reload;unselect"
    lf -remote "send $id echo '   successfully extracted archive(s)'"
}}

# CONVERT FILES

cmd "  convert to mp4" &{{
    for file in $fx; do
        lf -remote "send $id set user_progress '  󰤘   '"
        #lf -remote "send $id echo ' 󱥸  converting file $(basename $file) to mp4'"
        ffmpeg -i $file -c:v libx264 -pix_fmt yuv420p -b:v 12M -b:a 192k -c:a aac "${file%.*}.mp4"
    done

    lf -remote "send $id set user_progress '  󰈖  '"
    lf -remote "send $id :reload;unselect"
    lf -remote "send $id echo '   successfully converted to mp4'"
    sleep 4
    lf -remote "send $id set user_progress ''"
}}

cmd "  convert to mkv" &{{
    for file in $fx; do
        lf -remote "send $id set user_progress '  󰤘   '"
        #lf -remote "send $id echo ' 󱥸  converting file $(basename $file) to mkv'"
        ffmpeg -i $file -codec copy "${file%.*}.mkv"
    done

    lf -remote "send $id set user_progress '  󰈖  '"
    lf -remote "send $id :reload;unselect"
    lf -remote "send $id echo '   successfully converted to mkv'"
    sleep 4
    lf -remote "send $id set user_progress ''"
}}

cmd "  convert to png" &{{
    for file in $fx; do
        lf -remote "send $id set user_progress '  󰤘   '"
        #lf -remote "send $id echo ' 󱥸  converting file $(basename $file) to png'"
        ffmpeg -i $file "${file%.*}.png"
    done

    lf -remote "send $id set user_progress '  󰈖  '"
    lf -remote "send $id :reload;unselect"
    lf -remote "send $id echo '   successfully converted to png'"
    sleep 4
    lf -remote "send $id set user_progress ''"
}}

cmd "  convert to jpg" &{{
    for file in $fx; do
        lf -remote "send $id set user_progress '  󰤘   '"
        #lf -remote "send $id echo ' 󱥸  converting file $(basename $file) to jpg'"
        ffmpeg -i $file "${file%.*}.jpg"
    done

    lf -remote "send $id set user_progress '  󰈖  '"
    lf -remote "send $id :reload;unselect"
    lf -remote "send $id echo '   successfully converted to jpg'"
    sleep 4
    lf -remote "send $id set user_progress ''"
}}

cmd "  convert to gif" &{{
    for file in $fx; do
        lf -remote "send $id set user_progress '  󰤘   '"
        #lf -remote "send $id echo ' 󱥸  converting file $(basename $file) to gif'"
        ffmpeg -i $file -filter_complex "fps=15, scale='max(640,iw)':'max(480,ih)'[s]; [s]split[a][b]; [a]palettegen[palette]; [b][palette]paletteuse" "${file%.*}.gif";
    done

    lf -remote "send $id set user_progress '  󰈖  '"
    lf -remote "send $id :reload;unselect"
    lf -remote "send $id echo '   successfully converted to gif'"
    sleep 4
    lf -remote "send $id set user_progress ''"
}}

cmd "  convert to mp3" &{{
    for file in $fx; do
        lf -remote "send $id set user_progress '  󰤘   '"
        #lf -remote "send $id echo ' 󱥸  converting file $(basename $file) to mp3'"
        ffmpeg -i $file -vn -ar 44100 -ac 2 -b:a 320k "${file%.*}.mp3"	
    done

    lf -remote "send $id set user_progress '  󰈖  '"
    lf -remote "send $id :reload;unselect"
    lf -remote "send $id echo '   successfully converted to mp3'"
    sleep 4
    lf -remote "send $id set user_progress ''"
}}

# REMOVE METADATA

cmd "󱀷  remove metadata" %{{
    exiftool -all= -overwrite_original $fx
    lf -remote 'send :reload;unselect'	
    lf -remote "send $id echo '   all metadata has been removed"

}}

# OPEN FILE IN SPECIFIED APP

cmd "  open in gui app" %{{
    printf "   open file(s) in gui app: "
    read -r ans
    $ans $fx &
}}

cmd "  open in terminal" %{{
    printf "    open file(s) in terminal app: "
    read -r ans
    $ans $fx &
}}

cmd "󱕷  set default app to open filetype" ${{
    for file in "$fx"; do
        mimeopen -d $file
    done
}}

# DRAG AND DROP FILES

cmd "  open in drag and drop menu" &{{
    dragon-drop -a -x -T -i -s 96 $fx
    lf -remote "send $id :reload;unselect"
}}

cmd "󱩼  open in default editor" ${{
    $EDITOR "$f"
}}

cmd "󰷈  open in default text editor" %{{
    $TEXT_EDITOR "$f"
}}

cmd "  open in default browser" %{{
    $BROWSER "$f"
}}

cmd "󰈦  open in default pdf reader" %{{
    $PDF_READER "$f"
}}

cmd "󰈦  open in default pdf editor" %{{
    $PDF_EDITOR "$f"
}}

cmd "󰋩  open in default image viewer" %{{
    $IMAGE_VIEWER "$f"
}}

cmd "󰋩  open in default image editor" %{{
    $IMAGE_EDITOR "$f"
}}

cmd "󰃽  open in default video player" %{{
    $VIDEO_PLAYER "$f"
}}

cmd "󰃽  open in default video editor" %{{
    $VIDEO_EDITOR "$f"
}}

cmd "󰎄  open in default audio player" %{{
    $AUDIO_PLAYER "$f"
}}

cmd "󰎄  open in default audio editor" %{{
    $AUDIO_EDITOR "$f"
}}

# TRASH BIN

cmd trash %{{
    printf "   move $fx to trash bin? [y/n] " $fx
    read -r ans
    if [ "$ans" = "y" ]; then
        trash-put $fx &
        wait 
        lf -remote "send $id :reload;clear"
        lf -remote "send $id echo '  moved to trash bin successfully'"
    else
        lf -remote "send $id echoerr 'aborted'"
    fi
}}

cmd "󰠙  restore trashed file" ${{
    trash-restore
}}

cmd "󰗨  empty trash bin" ${{
    trash-empty --trash-dir ~/.local/share/Trash
}}

# DELETE PERMANENTLY

cmd delete %{{
    printf "   delete $fx permanently? [y/n] " $fx
    read -r ans
    if [ "$ans" = "y" ]; then
        rm -r $fx &
        wait
        #| pv -l -s $(find $fx | wc -l) > /dev/null
        lf -remote "send $id :reload;clear"
        lf -remote "send $id echo '  deleted successfully'"
    else
        lf -remote "send $id echoerr 'aborted'" 
    fi
}}

# KITTY TABS

cmd "󰝜  open new tab" ${{
    #curdir=printf $(pwd)
    #tmux new-window -c "$curdir" "lf"
    kitten @ action set_tab_title "lf"
    #"${PWD##*/}"
    kitten @ launch --cwd=current --type=tab --copy-env --tab-title "lf" "lf" 
}}

cmd "󰝜  create new session" ${{
    lf -remote "send $id 'quit'"
    tmux new-session "lf"
}}

cmd "󰭌  close current tab" ${{
    #tmux kill-window
    kitten @ close-tab
}}

cmd "󰭌  close current session" ${{
    printf " 󰭌  do you really want to close the current session? [y/n] "
    read -r ans
    if [ "$ans" = "y" ]; then
        #tmux kill-session
        kitten @ close-tab -m all
    else
        lf -remote "send $id echoerr 'aborted'"
        
    fi
}}

cmd "󰓩  open previous tab" ${{
    #tmux select-window -t -1
    kitten @ action previous_tab
}}

cmd "󰓩  open next tab" ${{
    #tmux select-window -t +1
    kitten @ action next_tab
}}

cmd "󰓩  move tab to left" ${{
    #tmux swap-window -t -1
    #tmux select-window -t -1
    kitten @ action move_tab_backward
}}

cmd "󰓩  move tab to right" ${{
    #tmux swap-window -t +1
    #tmux select-window -t +1
    kitten @ action move_tab_forward
}}

cmd "󰓩  open tab 1" ${{
    #tmux select-window -t:1
    kitten @ action goto_tab 1
}}

cmd "󰓩  open tab 2" ${{
    #tmux select-window -t:2
    kitten @ action goto_tab 2
}}

cmd "󰓩  open tab 3" ${{
    #tmux select-window -t:3
    kitten @ action goto_tab 3
}}

cmd "󰓩  open tab 4" ${{
    #tmux select-window -t:4
    kitten @ action goto_tab 4
}}

# COMMAND MODE

cmd "command autocomplete" &{{
    if [ "$lf_mode" = "command" ]; then
        lf -remote "send $id complete-cmd"
    else
        lf -remote "send $id cmd-enter"
    fi
}}

cmd complete-cmd :{{
# position cursor at the end of the first word
#cmd-home
    cmd-word
# perform tab completion before running the command
    cmd-complete
#cmd-enter
}}

# MODE SPECIFIC

cmd "go to next file (filter mode)" &{{
    if [ "$lf_mode" = "filter" ]; then
        lf -remote "send $id down"
    fi
}}

cmd "go to previous file (filter mode)" &{{
    if [ "$lf_mode" = "filter" ]; then
        lf -remote "send $id up"
    fi
}}

cmd "go to next file (search mode)" &{{
    if [ "$lf_mode" = "search" ]; then
        lf -remote "send $id search-next"
    fi
}}

cmd "go to previous file (search mode)" &{{
    if [ "$lf_mode" = "search" ]; then
        lf -remote "send $id search-prev"
    fi
}}

# HELP

cmd "󱔗  open documentation" ${{
    lf -doc | $PAGER
}}

cmd "  list maps" ${{
    lf -remote "query $id maps" | $PAGER
}}

cmd "  list command maps" ${{
    lf -remote "query $id cmaps" | $PAGER
}}

cmd "  list commands" ${{
    lf -remote "query $id cmds" | $PAGER
}}

cmd "  list jump history" ${{
    clear
    dir=$(
        lf -remote "query $id jumps" |
        awk -F'\t' 'NR > 1 { print $NF}' |
        sort -u |
        fzf --style full --list-label='   jump to location ' --list-border --list-border=rounded --header-first --color 'list-border:#EFB038,list-label:#CB2211'
        )
    
    if [ -d "$dir" ]; then
        lf -remote "send $id cd \"$dir\""
    fi
}}

cmd "  display current lf version" %{{
    lf -remote "send $id echo '   lf version: $(lf -version)'"
}}

# MISC

cmd "󰊢  git pull" %{{
    git pull 
}}

cmd "󰕩  compare 2 or 4 videos simultaneously" ${{
    tcount() {
        echo "$#"
    }
    nof=$(tcount $fx)

    if [ $nof == 2 ]; then
        mapfile -t -n 2 array < <(printf '%s\n' "$fx")
        fname1=${array[0]##*/}
        fname2=${array[1]##*/}

        lf -remote "send $id echo '   playing now: $fname1 & $fname2'"
        mpv "${array[0]}" --external-file="${array[1]}" --lavfi-complex='[vid1] [vid2] hstack [vo]'
        lf -remote "send $id :clear;unselect"


    elif [ $nof == 4 ]; then
        mapfile -t -n 4 array < <(printf '%s\n' "$fx")
        fname1=${array[0]##*/}
        fname2=${array[1]##*/}
        fname3=${array[2]##*/}
        fname4=${array[3]##*/}

        lf -remote "send $id echo '   playing now: $fname1, $fname2, $fname3 & $fname4'"
        mpv "${array[0]}" --external-file="${array[1]}" --external-file="${array[2]}" --external-file="${array[3]}" --lavfi-complex='[vid1] [vid2] hstack [t1] ; [vid3] [vid4] hstack [t2] ; [t1] [t2] vstack [vo]'
        lf -remote "send $id :clear;unselect"

    else
        lf -remote "send $id echoerr 'invalid number of videos selected (2 or 4 allowed)'"
    fi
}}

cmd "󰑓  reload config file" ${{
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

cmd "󰑓  reload config file for all instances" ${{
    lf -remote "send source ~/.config/lf/lfrc"
}}

# MOUNT

cmd "  mount all available devices" %{{
    udiskie-mount -ar 
}}

cmd "  eject current media" %{{
    sync && udiskie-umount -f "$f"
}}

# ON STARTUP

on-cd
on-focus-gained

# WIP

source ~/.config/lf/test

#
#
# █▄▀ ██▀ ▀▄▀ █▄ ▄█ ▄▀▄ █▀▄ ▄▀▀
# █ █ █▄▄  █  █ ▀ █ █▀█ █▀  ▄██
#
#

source ~/.config/lf/keymaps

